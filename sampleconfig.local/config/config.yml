# The properties of this server.
server:
  # The identity and credentials of this server.
  identity:
    # identity.id denotes the id of the server.
    id: bcdb-node1
    # identity.certificatePath denotes the path to the x509 certificate
    # of the node. This certificate and associated key is used in all
    # client facing communication, as well as for signing blocks and
    # transaction replies.
    certificatePath: sampleconfig.local/crypto/node/node.pem
    # identity.keyPath denotes the path to the private key of the node.
    keyPath: sampleconfig.local/crypto/node/node.key
  # The listen address and port of the network interface used for client
  # communication. The external address (or host name) of this interface
  # must be accessible to clients, and is declared in:
  # consensus.members[i].nodeHost
  # consensus.members[i].nodePort
  # where consensus.members[i].nodeID == node.identity.id
  network:
    # network.address denotes the listen address
    address:
    # network.port denotes the listen port
    port: 6001
  database:
    # database.name denotes the name of the underlying
    # database engine
    name: leveldb
    # database.ledgerDirectory denotes the root path
    # where we store all ledger data
    ledgerdirectory: ledger
  queueLength:
    # queueLength.transaction denotes the maximum
    # queue length of waiting transactions
    transaction: 1000
    # queueLength.transactionBatch denotes the maximum
    # queue length of waiting reordered batches of transactions
    reorderedTransactionBatch: 100
    # queueLength.block denotes the maximum queue length
    # of waiting blocks
    block: 100
  # logLevel can be debug, info, warn, err, and panic
  logLevel: info

# blockCreation carries block creation parameters.
blockCreation:
  # blockCreation.blockSize denotes the maximum allowed size of the block in MB
  maxBlockSize: 20

  # maxTransactionCountPerBlock denotes the maximum allowed number of
  # transactions per block
  maxTransactionCountPerBlock: 500

  # blockTimeout denotes the block timeout in milliseconds
  blockTimeout: 5000ms

# The replication settings specific to this server.
replication:
  # The directory for the Raft WAL (write ahead log).
  walDir: "/var/bcdb-server/ledger/etcdraft/wal"

  # The directory for the Raft snapshots.
  snapDir: "/var/bcdb-server/ledger/etcdraft/snapshot"

  # The listen address and port for intra-cluster communication.
  # The external address (or host name) of this interface
  # must be accessible from all other servers (a.k.a. "peers"),
  # and is declared in the shared configuration:
  # consensus.members[i].peerHost
  # consensus.members[i].peerPort
  # where consensus.members[i].nodeID == node.identity.id
  network:
    # The listen address
    address: 127.0.0.1
    # The listen port
    port: 7050

  # TLS settings for intra-cluster communication.
  tls:
    # Require server-side TLS.
    enabled: false
    # Require client certificates / mutual TLS for inbound connections.
    clientAuthRequired: false
    # X.509 certificate used for TLS server
    serverCertificatePath: /etc/bcdb-server/crypto/cluster/server.cert
    # Private key for TLS server
    serverKeyPath: /etc/bcdb-server/crypto/cluster/server.key
    # X.509 certificate used for creating TLS client connections.
    clientCertificatePath: /etc/bcdb-server/crypto/cluster/client.cert
    # Private key used for creating TLS client connections.
    clientKeyPath: /etc/bcdb-server/crypto/cluster/client.key
    # cluster.tls.caConfig defines the paths to the x509 certificates
    # of the root and intermediate certificate authorities that issued
    # all the certificates used for intra-cluster communication.
    caConfig:
      # The paths to root certificates. At least one is required. for example:
      #   rootCACertsPath: ./testdata/rootcaA.cert, ./testdata/rootcaB.cert
      rootCACertsPath: /etc/bcdb-server/crypto/cluster/rootca.cert

      # The paths to intermediate certificates. Optional. For example:
      # intermediateCACertsPath: ./testdata/cluster/midcaA.cert, ./testdata/cluster/midcaB.cert
      # intermediateCACertsPath: ./pki/cluster/midca.cert


# bootstrap specifies the method of starting a new node with an empty ledger and database.
bootstrap:
  # method specifies how to use the bootstrap file:
  # - 'genesis' means to load it as the initial configuration that will be converted into the ledger's genesis block and
  #    loaded into the database when the server starts with an empty ledger.
  # - 'cluster' means to load it as a temporary configuration that will be used to connect to existing cluster members
  #    and on-board by fetching the ledger from them, rebuilding the database in the process (not supported yet).
  method: genesis
  # file contains the initial configuration that will be used to bootstrap the node, as specified by the method, above.
  file: sampleconfig.local/config/1node-shared-config-bootstrap.yml
